/*
 * This file is generated by jOOQ.
 */
package ru.inovus.messaging.impl.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.inovus.messaging.impl.jooq.tables.Channel;


/**
 * Канал отправки
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChannelRecord extends UpdatableRecordImpl<ChannelRecord> implements Record3<String, String, String> {

    private static final long serialVersionUID = -1880177342;

    /**
     * Setter for <code>public.channel.id</code>. Уникальный код канала
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.channel.id</code>. Уникальный код канала
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.channel.name</code>. Имя канала для отображения на UI
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.channel.name</code>. Имя канала для отображения на UI
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.channel.queue_name</code>. Имя очереди канала
     */
    public void setQueueName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.channel.queue_name</code>. Имя очереди канала
     */
    public String getQueueName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Channel.CHANNEL.ID;
    }

    @Override
    public Field<String> field2() {
        return Channel.CHANNEL.NAME;
    }

    @Override
    public Field<String> field3() {
        return Channel.CHANNEL.QUEUE_NAME;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getQueueName();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getQueueName();
    }

    @Override
    public ChannelRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public ChannelRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ChannelRecord value3(String value) {
        setQueueName(value);
        return this;
    }

    @Override
    public ChannelRecord values(String value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ChannelRecord
     */
    public ChannelRecord() {
        super(Channel.CHANNEL);
    }

    /**
     * Create a detached, initialised ChannelRecord
     */
    public ChannelRecord(String id, String name, String queueName) {
        super(Channel.CHANNEL);

        set(0, id);
        set(1, name);
        set(2, queueName);
    }
}
