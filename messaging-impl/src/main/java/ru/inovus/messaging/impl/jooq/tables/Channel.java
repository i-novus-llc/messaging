/*
 * This file is generated by jOOQ.
 */
package ru.inovus.messaging.impl.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.inovus.messaging.impl.jooq.Keys;
import ru.inovus.messaging.impl.jooq.Messaging;
import ru.inovus.messaging.impl.jooq.tables.records.ChannelRecord;

import java.util.Arrays;
import java.util.List;


/**
 * Каналы отправки уведомлений
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Channel extends TableImpl<ChannelRecord> {

    private static final long serialVersionUID = 340945173;

    /**
     * The reference instance of <code>messaging.channel</code>
     */
    public static final Channel CHANNEL = new Channel();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChannelRecord> getRecordType() {
        return ChannelRecord.class;
    }

    /**
     * The column <code>messaging.channel.code</code>. Уникальный идентификатор
     */
    public final TableField<ChannelRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Уникальный идентификатор");

    /**
     * The column <code>messaging.channel.name</code>. Наименование канала
     */
    public final TableField<ChannelRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Наименование канала");

    /**
     * The column <code>messaging.channel.queue_name</code>. Наименование очереди канала
     */
    public final TableField<ChannelRecord, String> QUEUE_NAME = createField(DSL.name("queue_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Наименование очереди канала");

    /**
     * The column <code>messaging.channel.is_internal</code>. Признак внутрисистемного канала отправки
     */
    public final TableField<ChannelRecord, Boolean> IS_INTERNAL = createField(DSL.name("is_internal"), org.jooq.impl.SQLDataType.BOOLEAN, this, "Признак внутрисистемного канала отправки");

    /**
     * The column <code>messaging.channel.tenant_code</code>. Тенант, к которому относится канал отправки
     */
    public final TableField<ChannelRecord, String> TENANT_CODE = createField(DSL.name("tenant_code"), org.jooq.impl.SQLDataType.VARCHAR, this, "Тенант, к которому относится канал отправки");

    /**
     * The column <code>messaging.channel.id</code>.
     */
    public final TableField<ChannelRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>messaging.channel</code> table reference
     */
    public Channel() {
        this(DSL.name("channel"), null);
    }

    /**
     * Create an aliased <code>messaging.channel</code> table reference
     */
    public Channel(String alias) {
        this(DSL.name(alias), CHANNEL);
    }

    /**
     * Create an aliased <code>messaging.channel</code> table reference
     */
    public Channel(Name alias) {
        this(alias, CHANNEL);
    }

    private Channel(Name alias, Table<ChannelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Channel(Name alias, Table<ChannelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Каналы отправки уведомлений"), TableOptions.table());
    }

    public <O extends Record> Channel(Table<O> child, ForeignKey<O, ChannelRecord> key) {
        super(child, key, CHANNEL);
    }

    @Override
    public Schema getSchema() {
        return Messaging.MESSAGING;
    }

    @Override
    public UniqueKey<ChannelRecord> getPrimaryKey() {
        return Keys.CHANNEL_PKEY;
    }

    @Override
    public List<UniqueKey<ChannelRecord>> getKeys() {
        return Arrays.<UniqueKey<ChannelRecord>>asList(Keys.CHANNEL_CODE_TENANT_CODE_KEY, Keys.CHANNEL_PKEY);
    }

    @Override
    public List<ForeignKey<ChannelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ChannelRecord, ?>>asList(Keys.CHANNEL__CHANNEL_TENANT_CODE_FKEY);
    }

    public Tenant tenant() {
        return new Tenant(this, Keys.CHANNEL__CHANNEL_TENANT_CODE_FKEY);
    }

    @Override
    public Channel as(String alias) {
        return new Channel(DSL.name(alias), this);
    }

    @Override
    public Channel as(Name alias) {
        return new Channel(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(String name) {
        return new Channel(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Channel rename(Name name) {
        return new Channel(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, Boolean, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
