/*
 * This file is generated by jOOQ.
 */
package ru.inovus.messaging.impl.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.impl.TimestampToLocalDateTimeConverter;

import ru.inovus.messaging.api.AlertType;
import ru.inovus.messaging.api.Severity;
import ru.inovus.messaging.impl.AlertTypeConverter;
import ru.inovus.messaging.impl.SeverityConverter;
import ru.inovus.messaging.impl.jooq.Indexes;
import ru.inovus.messaging.impl.jooq.Keys;
import ru.inovus.messaging.impl.jooq.Public;
import ru.inovus.messaging.impl.jooq.tables.records.MessageRecord;


/**
 * Сообщения
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 963969082;

    /**
     * The reference instance of <code>public.message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>public.message.id</code>. Уникальный идентификатор
     */
    public final TableField<MessageRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Уникальный идентификатор");

    /**
     * The column <code>public.message.caption</code>. Заголовок
     */
    public final TableField<MessageRecord, String> CAPTION = createField("caption", org.jooq.impl.SQLDataType.VARCHAR, this, "Заголовок");

    /**
     * The column <code>public.message.text</code>. Содержимое сообщения
     */
    public final TableField<MessageRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Содержимое сообщения");

    /**
     * The column <code>public.message.severity</code>. Жесткость сообщения
     */
    public final TableField<MessageRecord, Severity> SEVERITY = createField("severity", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Жесткость сообщения", new SeverityConverter());

    /**
     * The column <code>public.message.alert_type</code>. Тип предупреждения
     */
    public final TableField<MessageRecord, AlertType> ALERT_TYPE = createField("alert_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Тип предупреждения", new AlertTypeConverter());

    /**
     * The column <code>public.message.sent_at</code>. Отправлено (дата и время)
     */
    public final TableField<MessageRecord, LocalDateTime> SENT_AT = createField("sent_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Отправлено (дата и время)", new TimestampToLocalDateTimeConverter());

    /**
     * The column <code>public.message.read_at</code>. Помечено прочтенным (дата и время)
     */
    public final TableField<MessageRecord, LocalDateTime> READ_AT = createField("read_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "Помечено прочтенным (дата и время)", new TimestampToLocalDateTimeConverter());

    /**
     * The column <code>public.message.recipient</code>. Получатель
     */
    public final TableField<MessageRecord, String> RECIPIENT = createField("recipient", org.jooq.impl.SQLDataType.VARCHAR, this, "Получатель");

    /**
     * The column <code>public.message.system_id</code>. Идентификатор системы
     */
    public final TableField<MessageRecord, String> SYSTEM_ID = createField("system_id", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Идентификатор системы");

    /**
     * Create a <code>public.message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    /**
     * Create an aliased <code>public.message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>public.message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Сообщения"));
    }

    public <O extends Record> Message(Table<O> child, ForeignKey<O, MessageRecord> key) {
        super(child, key, MESSAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_MESSAGE_RECIPIENT, Indexes.IX_MESSAGE_SYSTEM_ID, Indexes.MESSAGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Keys.MESSAGE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageRecord>>asList(Keys.MESSAGE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }
}
