/*
 * This file is generated by jOOQ.
 */
package ru.inovus.messaging.impl.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.inovus.messaging.impl.jooq.Keys;
import ru.inovus.messaging.impl.jooq.Messaging;
import ru.inovus.messaging.impl.jooq.tables.records.TenantRecord;

import java.util.Arrays;
import java.util.List;


/**
 * Тенанты
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tenant extends TableImpl<TenantRecord> {

    private static final long serialVersionUID = -248045846;

    /**
     * The reference instance of <code>messaging.tenant</code>
     */
    public static final Tenant TENANT = new Tenant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TenantRecord> getRecordType() {
        return TenantRecord.class;
    }

    /**
     * The column <code>messaging.tenant.code</code>. Уникальный код тенанта
     */
    public final TableField<TenantRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Уникальный код тенанта");

    /**
     * The column <code>messaging.tenant.name</code>. Наименование тенанта
     */
    public final TableField<TenantRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR, this, "Наименование тенанта");

    /**
     * Create a <code>messaging.tenant</code> table reference
     */
    public Tenant() {
        this(DSL.name("tenant"), null);
    }

    /**
     * Create an aliased <code>messaging.tenant</code> table reference
     */
    public Tenant(String alias) {
        this(DSL.name(alias), TENANT);
    }

    /**
     * Create an aliased <code>messaging.tenant</code> table reference
     */
    public Tenant(Name alias) {
        this(alias, TENANT);
    }

    private Tenant(Name alias, Table<TenantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tenant(Name alias, Table<TenantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Тенанты"), TableOptions.table());
    }

    public <O extends Record> Tenant(Table<O> child, ForeignKey<O, TenantRecord> key) {
        super(child, key, TENANT);
    }

    @Override
    public Schema getSchema() {
        return Messaging.MESSAGING;
    }

    @Override
    public UniqueKey<TenantRecord> getPrimaryKey() {
        return Keys.TENANT_PKEY;
    }

    @Override
    public List<UniqueKey<TenantRecord>> getKeys() {
        return Arrays.<UniqueKey<TenantRecord>>asList(Keys.TENANT_PKEY);
    }

    @Override
    public Tenant as(String alias) {
        return new Tenant(DSL.name(alias), this);
    }

    @Override
    public Tenant as(Name alias) {
        return new Tenant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(String name) {
        return new Tenant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tenant rename(Name name) {
        return new Tenant(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
