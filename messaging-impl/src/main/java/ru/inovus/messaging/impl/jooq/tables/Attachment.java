/*
 * This file is generated by jOOQ.
 */
package ru.inovus.messaging.impl.jooq.tables;


import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import ru.inovus.messaging.impl.jooq.Keys;
import ru.inovus.messaging.impl.jooq.Messaging;
import ru.inovus.messaging.impl.jooq.tables.records.AttachmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * Вложения
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Attachment extends TableImpl<AttachmentRecord> {

    private static final long serialVersionUID = -1690493298;

    /**
     * The reference instance of <code>messaging.attachment</code>
     */
    public static final Attachment ATTACHMENT = new Attachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AttachmentRecord> getRecordType() {
        return AttachmentRecord.class;
    }

    /**
     * The column <code>messaging.attachment.id</code>. Уникальный идентификатор записи
     */
    public final TableField<AttachmentRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор записи");

    /**
     * The column <code>messaging.attachment.message_id</code>. Уникальный идентификатор уведомления
     */
    public final TableField<AttachmentRecord, UUID> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "Уникальный идентификатор уведомления");

    /**
     * The column <code>messaging.attachment.file</code>. Имя файла в хранилище
     */
    public final TableField<AttachmentRecord, String> FILE = createField(DSL.name("file"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Имя файла в хранилище");

    /**
     * The column <code>messaging.attachment.created_at</code>. Время создания файла
     */
    public final TableField<AttachmentRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "Время создания файла");

    /**
     * Create a <code>messaging.attachment</code> table reference
     */
    public Attachment() {
        this(DSL.name("attachment"), null);
    }

    /**
     * Create an aliased <code>messaging.attachment</code> table reference
     */
    public Attachment(String alias) {
        this(DSL.name(alias), ATTACHMENT);
    }

    /**
     * Create an aliased <code>messaging.attachment</code> table reference
     */
    public Attachment(Name alias) {
        this(alias, ATTACHMENT);
    }

    private Attachment(Name alias, Table<AttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Attachment(Name alias, Table<AttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Вложения"), TableOptions.table());
    }

    public <O extends Record> Attachment(Table<O> child, ForeignKey<O, AttachmentRecord> key) {
        super(child, key, ATTACHMENT);
    }

    @Override
    public Schema getSchema() {
        return Messaging.MESSAGING;
    }

    @Override
    public UniqueKey<AttachmentRecord> getPrimaryKey() {
        return Keys.ATTACHMENT_PKEY;
    }

    @Override
    public List<UniqueKey<AttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AttachmentRecord>>asList(Keys.ATTACHMENT_PKEY);
    }

    @Override
    public List<ForeignKey<AttachmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AttachmentRecord, ?>>asList(Keys.ATTACHMENT__ATTACHMENT_MESSAGE_ID_FK);
    }

    public Message message() {
        return new Message(this, Keys.ATTACHMENT__ATTACHMENT_MESSAGE_ID_FK);
    }

    @Override
    public Attachment as(String alias) {
        return new Attachment(DSL.name(alias), this);
    }

    @Override
    public Attachment as(Name alias) {
        return new Attachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(String name) {
        return new Attachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Attachment rename(Name name) {
        return new Attachment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
