/*
 * This file is generated by jOOQ.
 */
package ru.inovus.messaging.impl.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.inovus.messaging.api.model.AlertType;
import ru.inovus.messaging.api.model.FormationType;
import ru.inovus.messaging.api.model.Severity;
import ru.inovus.messaging.impl.util.AlertTypeConverter;
import ru.inovus.messaging.impl.util.FormationTypeConverter;
import ru.inovus.messaging.impl.util.SeverityConverter;
import ru.inovus.messaging.impl.jooq.Indexes;
import ru.inovus.messaging.impl.jooq.Keys;
import ru.inovus.messaging.impl.jooq.Public;
import ru.inovus.messaging.impl.jooq.tables.records.MessageSettingRecord;


/**
 * Шаблоны уведомлений (общесистемные настройки)
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageSetting extends TableImpl<MessageSettingRecord> {

    private static final long serialVersionUID = -275882717;

    /**
     * The reference instance of <code>public.message_setting</code>
     */
    public static final MessageSetting MESSAGE_SETTING = new MessageSetting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageSettingRecord> getRecordType() {
        return MessageSettingRecord.class;
    }

    /**
     * The column <code>public.message_setting.id</code>. Уникальный идентификатор
     */
    public final TableField<MessageSettingRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Уникальный идентификатор");

    /**
     * The column <code>public.message_setting.caption</code>. Заголовок
     */
    public final TableField<MessageSettingRecord, String> CAPTION = createField("caption", org.jooq.impl.SQLDataType.VARCHAR, this, "Заголовок");

    /**
     * The column <code>public.message_setting.text</code>. Содержимое сообщения
     */
    public final TableField<MessageSettingRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Содержимое сообщения");

    /**
     * The column <code>public.message_setting.severity</code>. Жесткость сообщения
     */
    public final TableField<MessageSettingRecord, Severity> SEVERITY = createField("severity", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Жесткость сообщения", new SeverityConverter());

    /**
     * The column <code>public.message_setting.alert_type</code>. Тип предупреждения
     */
    public final TableField<MessageSettingRecord, AlertType> ALERT_TYPE = createField("alert_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Тип предупреждения", new AlertTypeConverter());

    /**
     * The column <code>public.message_setting.component_id</code>. Ссылка на системный справочник компонентов Системы. Системный справочник будет настраиваться для каждой Системы при необходимости
     */
    public final TableField<MessageSettingRecord, Integer> COMPONENT_ID = createField("component_id", org.jooq.impl.SQLDataType.INTEGER, this, "Ссылка на системный справочник компонентов Системы. Системный справочник будет настраиваться для каждой Системы при необходимости");

    /**
     * The column <code>public.message_setting.name</code>. Название шаблона (события)
     */
    public final TableField<MessageSettingRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "Название шаблона (события)");

    /**
     * The column <code>public.message_setting.is_disabled</code>. Признак выключения уведомления
     */
    public final TableField<MessageSettingRecord, Boolean> IS_DISABLED = createField("is_disabled", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "Признак выключения уведомления");

    /**
     * The column <code>public.message_setting.formation_type</code>. Тип формирования уведомления
     */
    public final TableField<MessageSettingRecord, FormationType> FORMATION_TYPE = createField("formation_type", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Тип формирования уведомления", new FormationTypeConverter());

    /**
     * The column <code>public.message_setting.send_notice</code>.
     */
    public final TableField<MessageSettingRecord, Boolean> SEND_NOTICE = createField("send_notice", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.message_setting.send_email</code>.
     */
    public final TableField<MessageSettingRecord, Boolean> SEND_EMAIL = createField("send_email", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.message_setting.code</code>. Код шаблона сообщения
     */
    public final TableField<MessageSettingRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "Код шаблона сообщения");

    /**
     * Create a <code>public.message_setting</code> table reference
     */
    public MessageSetting() {
        this(DSL.name("message_setting"), null);
    }

    /**
     * Create an aliased <code>public.message_setting</code> table reference
     */
    public MessageSetting(String alias) {
        this(DSL.name(alias), MESSAGE_SETTING);
    }

    /**
     * Create an aliased <code>public.message_setting</code> table reference
     */
    public MessageSetting(Name alias) {
        this(alias, MESSAGE_SETTING);
    }

    private MessageSetting(Name alias, Table<MessageSettingRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageSetting(Name alias, Table<MessageSettingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Шаблоны уведомлений (общесистемные настройки)"));
    }

    public <O extends Record> MessageSetting(Table<O> child, ForeignKey<O, MessageSettingRecord> key) {
        super(child, key, MESSAGE_SETTING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CODE_UX, Indexes.MESSAGE_SETTING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MessageSettingRecord> getPrimaryKey() {
        return Keys.MESSAGE_SETTING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MessageSettingRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageSettingRecord>>asList(Keys.MESSAGE_SETTING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MessageSettingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MessageSettingRecord, ?>>asList(Keys.MESSAGE_SETTING__MESSAGE_SETTING_COMPONENT_ID_FKEY);
    }

    public Component component() {
        return new Component(this, Keys.MESSAGE_SETTING__MESSAGE_SETTING_COMPONENT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MessageSetting as(String alias) {
        return new MessageSetting(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MessageSetting as(Name alias) {
        return new MessageSetting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageSetting rename(String name) {
        return new MessageSetting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageSetting rename(Name name) {
        return new MessageSetting(name, null);
    }
}
